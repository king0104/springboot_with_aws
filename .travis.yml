language: java
jdk:
  - openjdk8

branches:
  only:
    - main

before_install:
  - chmod +x gradlew

# Travis CI 서버의 Home
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

script: "./gradlew clean build"



### Travis CI에서 빌드해서 만든 jar 파일을 s3에 올리게 해주는 코드 ###
before_deploy:
  - mkdir -p before-deploy #zip에 포함시킬 파일들을 담을 디렉토리
  - cp scripts/*.sh before-deploy/
  - cp appspec.yml before-deploy/
  - cp build/libs/*.jar before-deploy/
  - cd before-deploy && zip -r before-deploy * #before-deploy 폴더로 이동 후 전체 압축
  - cd ../ && mkdir -p deploy #상위 디렉토리로 이동 후 deploy 폴더 생성
  - mv before-deploy/before-deploy.zip deploy/springboot-with-aws.zip #deploy로 zip 파일


# 외부 서비스(s3 등)와 연동될 행위 설정
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: springboot-with-aws-build-yoon # S3 버킷
    region: ap-northeast-2
    skip_cleanup: true
    acl: private
    local_dir: deploy # before_deploy에서 생성한 디렉토리
    wait-until-deployed: true
    on:
      all_branches: true


### CodeDeploy 배포 ###
  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repos settings에 설정된 값
    bucket: springboot-with-aws-build-yoon # s3 버킷

    key: springboot-with-aws.zip # 빌드 파일 압축해서 전달
    bundle_type: zip # 압축 확장자
    application: springboot-with-aws # 웹 콘솔에서 등록한 CodeDelpoy 애플리케이션 이름
    deployment_group: springboot-with-aws-group # 웹 콘솔에서 등록한 CodeDelpoy 배포 그룹 이름

    region: ap-northeast-2
    wait-until-deployed: true
    on:
      all_branches: true # master말고 다른 모든 브런치 허용


# CI 실행 완료시 메일로 알람
notifications:
  email:
    recipients:
      - 4545abc@naver.com



